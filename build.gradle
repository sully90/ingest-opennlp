buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
 }

  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:6.0.0"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
  }
}

plugins {
  id "de.undercouch.download" version "3.2.0"
}

import de.undercouch.gradle.tasks.download.Download

group = 'org.elasticsearch.plugin.ingest'
version = '6.0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

// license of this project
licenseFile = rootProject.file('LICENSE.txt')
// copyright notices
noticeFile = rootProject.file('NOTICE.txt')

esplugin {
  // license of the plugin, may be different than the above license
  licenseFile rootProject.file('LICENSE.txt')
  // copyright notices, may be different than the above notice
  noticeFile rootProject.file('NOTICE.txt')
  name 'ingest-opennlp'
  description 'Ingest processor that uses OpenNLP for named entity extraction'
  classname 'org.elasticsearch.plugin.ingest.opennlp.IngestOpenNlpPlugin'
}

// In this section you declare the dependencies for your production and test code
// Elasticsearch dependency is included due to the build-tools, test-framework as well
dependencies {
  compile 'org.apache.opennlp:opennlp-tools:1.8.3'
}

bundlePlugin {
  from('src/test/resources/models') {
    into 'config/'
  }
}

integTestCluster {
  setting 'ingest.opennlp.model.file.names',     'en-ner-persons.bin'
  setting 'ingest.opennlp.model.file.locations', 'en-ner-locations.bin'
  setting 'ingest.opennlp.model.file.dates',     'en-ner-dates.bin'
  setting 'ingest.opennlp.tokenizer.file.sentences',    'en-sent.bin'
}

// check style can be disabled, or you can configure a different checkstyle file
// checkstyleMain.enabled = false
// checkstyleTest.enabled = false

// dependency license check needs can be enabled
dependencyLicenses.enabled = false

// thirdparty audit needs can be enabled
thirdPartyAudit.enabled = false

// license header checks can be disabled
licenseHeaders.enabled = false

// exlude the models for forbidden API check
forbiddenPatterns {
  exclude '**/*.bin'
}

// download the models before the tests are run, also needed for packaging
project.afterEvaluate {
  processTestResources.dependsOn downloadModels
}

// download the models but dont overwrite existing ones
task downloadModels {
  doLast {
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin',   'en-ner-persons.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-location.bin', 'en-ner-locations.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-date.bin',     'en-ner-dates.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-money.bin',     'en-ner-money.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-organization.bin',     'en-ner-organization.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-ner-percentage.bin',     'en-ner-percentage.bin')
    downloadIfNotExists('http://opennlp.sourceforge.net/models-1.5/en-sent.bin',     'en-sent.bin')
  }
}

def downloadIfNotExists(String url, String file) {
  String dir = 'src' + File.separator + 'test' + File.separator + 'resources' + File.separator + 'models'
  new File(dir).mkdirs()
  if (new File(dir + File.separator + file).exists() == false) {
    download {
      src url
      dest new File(dir, file)
    }
  }
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

